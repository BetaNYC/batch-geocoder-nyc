{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "AddToResults.svelte",
    "BoundsCustom.svelte",
    "ExportTextbox.svelte",
    "Footer.svelte",
    "InputTextbox.svelte",
    "Results.svelte",
    "LoadingIndicator.svelte",
    "ResultFieldsTable.svelte",
    "ResultItem.svelte",
    "ResultsMap.svelte",
    "StatusBlock.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import 'bulma/css/bulma.css'\n\n    import LoadingIndicator from './components/results/LoadingIndicator.svelte'\n    import SpeedSubtitle from './components/fun/SpeedSubtitle.svelte'\n    import FeedbackForm from './components/fun/FeedbackForm.svelte'\n    import BoundsSelect from './components/BoundsSelect.svelte'\n    import InputTextbox from './components/InputTextbox.svelte'\n    import ColumnsSelect from './components/ColumnsSelect.svelte'\n    import AddToResults from './components/AddToResults.svelte'\n    import Result from './components/Results.svelte'\n    import ExportTextbox from './components/ExportTextbox.svelte'\n    import Footer from './components/Footer.svelte'\n\n\n</script>\n\n<main>\n    <div class=\"has-text-centered\">\n        <h3 class=\"title is-3\">Batch geocoder for nyc</h3>\n        <SpeedSubtitle/>\n        <div class=\"has-text-grey-dark\">\n            <p>Fueled by Planning Lab's <a href=\"https://labs-geosearch-docs.netlify.app/\">GeoSearch</a> and Pelias.\n                Inspired by\n                Erik Willems' <a href=\"https://geocode.localfocus.nl/\">Batch geocoder for journalists</a>.</p>\n        </div>\n        <FeedbackForm/>\n    </div>\n\n    <br>\n    <BoundsSelect/>\n    <br>\n    <InputTextbox/>\n    <br>\n    <ColumnsSelect/>\n    <AddToResults/>\n    <br>\n    <Result/>\n    <br>\n    <ExportTextbox/>\n    <br>\n    <Footer/>\n\n    <LoadingIndicator/>\n</main>\n\n<style>\n    :global(main) {\n        margin: 20px auto;\n        max-width: 1500px;\n        color: #444;\n        padding: 0 25px;\n        font-family: 'Open Sans', sans-serif !important;\n    }\n\n    :global(.top-margin) {\n        margin-top: 0.5rem;\n    }\n</style>\n",
    "<script>\n    import { input, inputText, parameters, addressColumn, results } from '../stores'\n    import geoSearch from '../utils/geoSearch'\n\n    function geocodeInput() {\n        //add input to results\n        const newInput = $input.map(fields => ({\n            features: [],\n            selectedFeatureId: null,\n            address: fields[$addressColumn],\n            fields,\n            pending: true,\n            checked: null,\n            status: 'Pending',\n            color: '#9e9e9e',\n            error: null\n        }))\n        results.add(newInput)\n\n        //clear input\n        inputText.set('')\n\n        // geocode only pending items using addressColumn and parameters\n        $results.filter(result => result.pending).map(result => {\n            return geoSearch(result.address, $parameters).then(features => {\n                result.features = features\n                result.selectedFeatureId = features.length ? features[0].properties.id : null\n                result.pending = false\n                results.updateItem(result, result.index)\n            }).catch(error => {\n                //todo - show errors\n                result.features = []\n                result.pending = false\n                result.error = error.message\n                results.updateItem(result, result.index)\n            })\n        })\n    }\n\n</script>\n\n{#if $addressColumn !== null}\n    <div class=\"container\">\n        <button class=\"button is-info\" on:click={geocodeInput}>Add to geocoder</button>\n    </div>\n{/if}\n\n<style>\n    .container {\n        margin-top: 0.5rem;\n    }\n</style>",
    "<script>\n    import { createEventDispatcher } from 'svelte'\n\n    const dispatch = createEventDispatcher()\n\n    import L from '../libs/leaflet'\n    import { onMount } from 'svelte'\n\n    let container\n    let map\n    let layer\n\n    $: {\n        if (layer) {\n            dispatch('message', layer.getBounds() );\n        }\n    }\n\n    onMount(() => {\n        const settings = {\n            maxZoom: 20,\n            minZoom: 9,\n            bounds: L.latLngBounds([40.496133, -74.2555913], [40.9155327, -73.70000906])\n        }\n        map = L.map(container, { ...settings }).setView([40.694457, -73.93045], 10)\n\n        //draw layer\n        const editableLayers = new L.FeatureGroup().addTo(map)\n\n        L.control.layers({\n            'osm': L.tileLayer(\n                    'https://cartodb-basemaps-{s}.global.ssl.fastly.net/rastertiles/voyager_labels_under/{z}/{x}/{y}{r}.png',\n                    {\n                        ...settings,\n                        attribution: 'Carto | &copy; <a href=\"http://osm.org/copyright\">OSM</a> contributors'\n                    }\n            ).addTo(map),\n        }, {}, { position: 'topleft', collapsed: false }).addTo(map)\n\n        //controls\n        map.addControl(new L.Control.Draw({\n            draw: {\n                polyline: false,\n                circlemarker: false,\n                circle: false,\n                polygon: false,\n                marker: false,\n                rectangle: { showArea: false }\n            },\n            edit: {\n                featureGroup: editableLayers\n            }\n        }))\n\n        map.on('draw:created', e => {\n            if (layer) {\n                //remove previous layer\n                editableLayers.removeLayer(layer)\n            }\n            layer = e.layer\n            editableLayers.addLayer(layer)\n        })\n\n    })\n</script>\n\n<div id=\"map\" bind:this={container}></div>\n\n<style>\n    #map {\n        margin-top: 0.5rem;\n        width: 80%;\n        height: 300px;\n    }\n\n</style>",
    "<script>\n    import Papa from 'papaparse'\n    import { results } from '../stores'\n\n    let value = ''\n    let hiddenLink\n\n    $:  exportData = $results.map(({ features, fields, status, selectedFeatureId }) => {\n        //generate export to include original fields, _location, _latitude, _longitude, _status\n        const feature = features.find(feature => feature.properties.id === selectedFeatureId)\n\n        if (feature) {\n            const d_feature = Object.assign({}, feature) // deep copy\n            return {\n                ...fields,\n                _location: d_feature.properties.label,\n                _latitude: d_feature.geometry.coordinates[1],\n                _longitude: d_feature.geometry.coordinates[0],\n                _status: status,\n                _bin: d_feature.properties.pad_bin,\n                _bbl: d_feature.properties.pad_bbl\n            }\n        }\n        return {\n            ...fields,\n            _location: '?',\n            _latitude: '?',\n            _longitude: '?',\n            _status: status,\n            _bin: '?',\n            _bbl: '?'\n        }\n    })\n\n    $: updateTextBox(exportData)\n\n    let timer\n    const updateTextBox = exportData => {\n        clearTimeout(timer)\n        timer = setTimeout(() => {\n            value = Papa.unparse(exportData, { delimiter: '\\t' })\n        }, 500)\n    }\n\n    function downloadCSV() {\n        if (hiddenLink) {\n            const csvExport = Papa.unparse(exportData, { delimiter: ',' })\n            const url = 'data:text/plain;charset=utf-8,' + window.encodeURIComponent(csvExport)\n            hiddenLink.setAttribute('download', 'export.csv')\n            hiddenLink.setAttribute('href', url)\n            hiddenLink.click()\n        }\n    }\n</script>\n\n<div class=\"container\">\n    <h5 class=\"is-size-5\">5. Copy and paste coordinates to spreadsheet, or <a on:click={downloadCSV}>download a csv</a>.\n    </h5>\n    <p class=\"is-size-7 has-text-grey-dark\">Order of columns: [Original Columns], _location, _latitude, _longitude,\n        _status, _bin, _bbl.</p>\n    <div class=\"field top-margin\">\n        <div class=\"control\">\n            <textarea class=\"textarea\" bind:value></textarea>\n        </div>\n    </div>\n    <a bind:this={hiddenLink} class=\"hidden\"></a>\n</div>\n\n<style>\n    textarea {\n        color: #5e5e5e;\n        width: 100%;\n        height: 250px;\n        line-height: 1.1rem;\n    }\n\n    .hidden {\n        display: none;\n    }\n</style>",
    "<footer>\n    <div class=\"footer-links\">\n        <div class=\"stack\">\n            <span>GNU General Public License</span>\n            <a href=\"https://github.com/BetaNYC/batch-geocoder-nyc/issues\" target=\"_blank\">File a GitHub feature request or issue</a>\n        </div>\n        <figure>\n            <img\n                    class=\"logo\"\n                    alt=\"BetaNYC Logo\"\n                    src=\"images/BetaNYC_short_white_on_blue.png\"\n            />\n            <figcaption class=\"logo_caption\">A <a href=\"https://beta.nyc/\" target=\"_blank\">BetaNYC</a> Tool</figcaption>\n        </figure>\n        <div class=\"stack\">\n            <p>Using <a href=\"http://geosearch.planninglabs.nyc/\">GeoSearch 0.2</a>, PAD 19A</p>\n        </div>\n\n    </div>\n</footer>\n\n<style>\n    footer {\n        text-align: center;\n        margin-top: 1rem;\n    }\n\n    .logo {\n        width: 30px;\n        margin: auto;\n        display: block;\n    }\n\n    .logo_caption {\n        font-size: 0.6rem;\n        margin-top: 5px;\n        text-align: center;\n    }\n\n    .footer-links {\n        display: flex;\n        font-size: 11px;\n        justify-content: space-around;\n    }\n\n    .stack {\n        display: flex;\n        flex-direction: column;\n    }\n</style>",
    "<script>\n    import { onMount, onDestroy } from 'svelte'\n    import { input, inputText } from '../stores'\n    import Papa from 'papaparse'\n\n    const placeholder = 'name\\taddress\\nMunicipal Building\\t1 Centre Street, New York, NY 10007\\nEquitable Building\\t120 Broadway, New York, NY 10271'\n    let container\n    let timer\n\n    const debounce = v => {\n        clearTimeout(timer)\n        timer = setTimeout(() => {\n            inputText.set(v)\n        }, 500)\n    }\n\n    function readFile() {\n        //update value when file uploaded\n        //todo - catch error\n        const reader = new FileReader()\n\n        reader.onload = () => {\n            inputText.set(reader.result)\n        }\n        reader.readAsBinaryString(container.files[0])\n    }\n\n    onMount(() => container.addEventListener('change', readFile))\n\n    onDestroy(() => container.removeEventListener('change', readFile))\n\n\n    $: {\n        //when value changes update store with an array of objects\n        if ($inputText !== null) {\n            Papa.parse($inputText, {\n                header: true,\n                complete: results => input.set(results.data)\n            })\n        }\n    }\n\n</script>\n\n\n<div class=\"container\">\n    <h5 class=\"is-size-5\">2. Copy and paste a list of locations, or upload a csv.</h5>\n    <p class=\"is-size-7 has-text-grey-dark\">When pasting or uploading files, your first column should be the\n        headers. Columns should be separated by tabs or commas.</p>\n    <div class=\"field top-margin\">\n        <div class=\"control\">\n            <input type=\"file\" bind:this=\"{container}\" accept=\".csv,.tsv\">\n        </div>\n    </div>\n    <div class=\"field top-margin\">\n        <div class=\"control\">\n            <textarea {placeholder} class=\"textarea\" value={$inputText}\n                      on:keyup={({ target: { value } }) => debounce(value)}></textarea>\n        </div>\n    </div>\n</div>\n\n<style>\n    textarea {\n        color: #5e5e5e;\n        width: 100%;\n        height: 150px;\n        line-height: 1.1rem;\n    }\n\n    textarea::placeholder {\n        color: #a8a8a8;\n        font-weight: 300;\n    }\n</style>",
    "<script>\n    import { results, parameters, resultsDOM, openedResultIndex } from '../stores'\n    import ResultsMap from './results/ResultsMap.svelte'\n    import StatusBlock from './results/StatusBlock.svelte'\n    import ResultItem from './results/ResultItem.svelte'\n\n    let status = [\n        {\n            name: 'Pending', color: '#9e9e9e', checked: true, count: 0\n        },\n        {\n            name: 'Checked', color: '#8bc34a', checked: true, count: 0\n        },\n        {\n            name: 'Unchecked', color: '#ff9800', checked: true, count: 0\n        },\n        {\n            name: 'Failed', color: '#f44336', checked: true, count: 0\n        }\n    ]\n\n    $: {\n        //get status counts\n        const counts = $results.reduce((counts, { status }) => {\n            counts[status] += 1\n            return counts\n        }, { 'Pending': 0, 'Checked': 0, 'Unchecked': 0, 'Failed': 0 })\n\n        status.forEach(i => i.count = counts[i.name])\n        status = status\n    }\n\n    function updateQueueItem(event) {\n        const { result, index } = event.detail\n        results.updateItem(result, index)\n    }\n\n    $: filteredResults = $results.filter(result => {\n        //filterResults based on checked statues and if currently selected\n        const statusFilter = status.filter(i => i.checked).map(i => i.name).includes(result.status)\n        const selectedFilter = result.index !== null && result.index === $openedResultIndex\n        return statusFilter || selectedFilter\n    })\n\n\n</script>\n\n<div class=\"container\">\n    <h5 class=\"is-size-5\">4. Check the results</h5>\n    <p class=\"is-size-6 has-text-grey-dark\">Click on an address below or on the map to view or edit. If\n        there were multiple locations for address found, the first hit will be selected.</p>\n    <p class=\"is-size-7 has-text-grey\"> Check and Unchecked are optional labels you may use to keep track of\n        validated entries.</p>\n    <div class=\"columns\">\n        <div class=\"column is-half\">\n            <div class=\"status\">\n                {#each status as item, name}\n                    <label class=\"checkbox\">\n                        <input type=\"checkbox\" bind:checked={item.checked}>\n                        <StatusBlock color={item.color}/>\n                        {item.name} {item.count}\n                    </label>\n                {/each}\n                <div class=\"queue\" bind:this={$resultsDOM}>\n                    {#each filteredResults as result (result.index)}\n                        <ResultItem {result} on:message={updateQueueItem}/>\n                    {/each}\n                </div>\n            </div>\n        </div>\n        <div class=\"column is-half map\">\n            <ResultsMap/>\n        </div>\n    </div>\n</div>\n\n\n<style>\n    .checkbox {\n        padding-right: 0.6em;\n        line-height: 1.6;\n        vertical-align: middle;\n        cursor: pointer;\n        font-weight: 400;\n    }\n\n    .queue {\n        margin-top: 1rem;\n        max-height: 400px;\n        overflow-y: auto;\n    }\n\n    .map {\n        min-width: 400px;\n    }\n\n    .material-icons {\n        font-size: 0.8rem;\n    }\n</style>",
    "<script>\n    //from https://github.com/tobiasahlin/SpinKit\n    import { results } from '../../stores'\n\n    $: hasPendingResults = $results.some(result => result.status === 'Pending')\n</script>\n\n{#if hasPendingResults}\n    <div class=\"fixed\">\n        <div class=\"spinner\">\n            <div class=\"bounce1\"></div>\n            <div class=\"bounce2\"></div>\n            <div class=\"bounce3\"></div>\n        </div>\n    </div>\n{/if}\n\n<style>\n    .fixed {\n        position: fixed;\n        top: 0;\n        left: 0;\n        background-image: linear-gradient(rgba(238, 238, 238, 0.7),  rgba(238, 238, 238, 0.05));\n        width: 100%;\n    }\n\n    .spinner {\n        margin-left: 1rem;\n        margin-top: 1rem;\n        width: 70px;\n        text-align: center;\n    }\n\n    .spinner > div {\n        width: 18px;\n        height: 18px;\n        background-color: #2257a1;\n\n        border-radius: 100%;\n        display: inline-block;\n        -webkit-animation: sk-bouncedelay 1.4s infinite ease-in-out both;\n        animation: sk-bouncedelay 1.4s infinite ease-in-out both;\n    }\n\n    .spinner .bounce1 {\n        -webkit-animation-delay: -0.32s;\n        animation-delay: -0.32s;\n    }\n\n    .spinner .bounce2 {\n        -webkit-animation-delay: -0.16s;\n        animation-delay: -0.16s;\n    }\n\n    @-webkit-keyframes sk-bouncedelay {\n        0%, 80%, 100% {\n            -webkit-transform: scale(0)\n        }\n        40% {\n            -webkit-transform: scale(1.0)\n        }\n    }\n\n    @keyframes sk-bouncedelay {\n        0%, 80%, 100% {\n            -webkit-transform: scale(0);\n            transform: scale(0);\n        }\n        40% {\n            -webkit-transform: scale(1.0);\n            transform: scale(1.0);\n        }\n    }\n</style>",
    "<script>\n    export let fields = {}\n</script>\n\n<div class=\"fields\">\n    <table class=\"table is-narrow is-bordered\">\n        <thead>\n        <tr>\n            {#each Object.keys(fields) as col}\n                <th>{col}</th>\n            {/each}\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            {#each Object.values(fields) as col}\n                <td>{col}</td>\n            {/each}\n        </tr>\n        </tbody>\n    </table>\n</div>\n\n<style>\n    .fields {\n        max-width: 100%;\n        overflow-x: auto;\n        margin: 0.5rem;\n    }\n</style>",
    "<script>\n    import { parameters, openedResultIndex, mapStore } from '../../stores'\n    import { createEventDispatcher } from 'svelte'\n    import StatusBlock from './StatusBlock.svelte'\n    import ResultFieldsTable from './ResultFieldsTable.svelte'\n    import geoSearch from '../../utils/geoSearch'\n\n    const dispatch = createEventDispatcher()\n\n    export let result = {\n        address: '1 Test Street, Long Island Sound',\n        selectedFeatureId: null,\n        features: [],\n        fields: [],\n        status: 'Pending',\n        color: '#9e9e9e',\n        index: 0,\n        pending: false\n    }\n\n    let value = ''\n\n    function toggleOpened(){\n        $openedResultIndex !== result.index ? openedResultIndex.set(result.index) : openedResultIndex.set(null)\n    }\n\n    function geocode(value) {\n        geoSearch(value, $parameters).then(features => {\n            result = {\n                ...result,\n                features,\n                selectedFeatureId: features.length ? features[0].properties.id : null, //select first item by default\n                checked: null\n            }\n            result = result\n            update()\n        })\n    }\n\n    let timer\n\n    function debounceGeocode() {\n        clearTimeout(timer)\n        timer = setTimeout(() => {\n            geocode(value)\n        }, 50)\n    }\n\n    function toggleChecked(bool) {\n        if (result.selectedFeatureId && bool == true) {\n            result.checked = true\n        } else if (bool == false) {\n            result.checked = false\n        } else {\n            result.checked = null\n        }\n        result = result\n        update()\n    }\n\n    function update() {\n        dispatch('message', {\n            result, index: result.index\n        })\n    }\n\n    function updateSelectedFeatureId(e) {\n        result.selectedFeatureId = e.target.value\n        result.checked = null\n        result = result\n        update()\n    }\n\n    function zoomToSelectedFeature(){\n      if(result.selectedFeatureId){\n        const feature = result.features.find(feature => feature.properties.id === result.selectedFeatureId)\n          if(feature){\n            const coords = feature.geometry.coordinates.slice().reverse()\n            $mapStore.flyTo(coords, 19);\n          }\n      }\n    }\n\n\n</script>\n<div class=\"result-item\" bind:this={result.dom}>\n    <div class=\"top\" on:click={toggleOpened}>\n        <StatusBlock color={result.color} size=\"0.7\"/> {result.address} (Hits: {result.features.length})\n    </div>\n    {#if result.index === $openedResultIndex}\n        <div class=\"body\">\n            <ResultFieldsTable fields={result.fields}></ResultFieldsTable>\n            <div class=\"field body-input\">\n                <p class=\"control\">\n                    <input class=\"input is-small\" type=\"text\" placeholder=\"Street, Borough\" bind:value={value}\n                           on:keyup={() => value.length > 0 ? debounceGeocode(): null}>\n                </p>\n                <button class=\"button\" on:click={() => toggleChecked(true)}>\n                    <span class=\"icon\">\n                        <i class=\"material-icons\">check</i>\n                    </span>\n                </button>\n                <button class=\"button\" on:click={() => toggleChecked(false)}>\n                    <span class=\"icon\">\n                        <i class=\"material-icons\">close</i>\n                    </span>\n                </button>\n                <button class=\"button\" on:click={zoomToSelectedFeature}>\n                    <span class=\"icon\">\n                        <i class=\"material-icons\">zoom_out_map</i>\n                    </span>\n                </button>\n            </div>\n            <div class=\"control results\">\n                {#each result.features as feature (feature.properties.id)}\n                    <label class=\"radio\">\n                        <input type=\"radio\" name={result.index} bind:group={result.selectedFeatureId}\n                               on:change={updateSelectedFeatureId}\n                               value={feature.properties.id}><span class=\"name\">{feature.properties.label}</span>\n                    </label>\n                {/each}\n            </div>\n        </div>\n    {/if}\n</div>\n\n<style>\n    .result-item {\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        font-weight: 200;\n        font-size: 0.85em;\n        color: #5b5b5b;\n        line-height: 24px;\n        margin-bottom: 0.5rem;\n    }\n\n    .top {\n        padding: 2px 15px;\n        cursor: pointer;\n        color: #333333;\n        background-color: #f5f5f5;\n        border-bottom: 2px solid #dddddd;\n        border-top-left-radius: 4px;\n        border-top-right-radius: 4px;\n    }\n\n    .body-input {\n        margin: 0.85rem 0.5rem;\n        display: flex;\n        justify-content: space-around;\n    }\n\n    .button {\n        height: 1.8rem;\n        width: 20%;\n        margin-left: 0.2rem;\n    }\n\n    .material-icons {\n        font-size: 1.2rem;\n    }\n\n    .results label {\n        margin-left: 0.5rem;\n        margin-bottom: 0.5rem;\n        font-size: 0.85rem;\n    }\n\n    label .name {\n        margin-left: 0.2rem;\n    }\n\n</style>",
    "<script>\n    import L from '../../libs/leaflet'\n    import { onMount } from 'svelte'\n    import { results, resultsDOM, openedResultIndex, mapStore } from '../../stores'\n\n    let container\n    let map\n    let layer\n    let selectedPointLayer\n\n    onMount(() => {\n        const settings = {\n            maxZoom: 20,\n            minZoom: 9,\n            bounds: L.latLngBounds([40.496133, -74.2555913], [40.9155327, -73.70000906])\n        }\n        map = L.map(container, { ...settings }).setView([40.694457, -73.93045], 10)\n\n        L.control.layers({\n            'osm': L.tileLayer(\n                    'https://cartodb-basemaps-{s}.global.ssl.fastly.net/rastertiles/voyager_labels_under/{z}/{x}/{y}{r}.png',\n                    {\n                        ...settings,\n                        attribution: 'Carto | &copy; <a href=\"http://osm.org/copyright\">OSM</a> contributors'\n                    }\n            ).addTo(map),\n            'google satellite': L.tileLayer('http://www.google.com/maps/vt?lyrs=s@189&gl=cn&x={x}&y={y}&z={z}', {\n                ...settings,\n                attribution: '&copy; Google'\n            }),\n            'google road': L.tileLayer('https://mt1.google.com/vt/lyrs=m&x={x}&y={y}&z={z}', {\n                ...settings,\n                attribution: '&copy; Google'\n            })\n        }, {}, { position: 'topright', collapsed: true }).addTo(map)\n\n        mapStore.set(map)\n    })\n\n    $: {\n        if (map && $resultsDOM) {\n            if (layer) {\n                map.removeLayer(layer)\n            }\n\n            function createMarker(feature, latlng) {\n                const style = `\n                background-color:${feature.properties.color};\n                border-radius: 0.2em;\n                margin-right: 0.2em;\n                border: 1px solid #FFF;\n                height: inherit;\n                width: inherit;\n                display: inherit;\n              `\n\n                const icon = L.divIcon({\n                    className: 'leaflet-icon',\n                    html: `<span style='${style}'></span>`,\n                    iconSize: [10, 10],\n                    iconAnchor: [5, 5]\n                })\n                return L.marker(latlng, { icon })\n            }\n\n\n            const geojsonFeature = $results.filter(result => result.features.length).map(result => {\n                //select the selectedItem via selectedItemId, otherwise select the first item\n                let feature = result.features.find(feature => feature.properties.id === result.selectedFeatureId)\n                if (!feature) feature = result.features[0]\n                feature.properties.color = result.color\n                feature.properties.parentId = result.index\n                feature.properties.scrollIntoView = () => {\n                    //scroll to result item when clicked\n                    const { offsetTop: childOffsetTop } = result.dom\n                    const {\n                        offsetTop: parentOffsetTop,\n                        offsetHeight: parentOffsetHeight\n                    } = $resultsDOM\n                    $resultsDOM.scrollTop = parentOffsetTop + childOffsetTop - parentOffsetHeight / 2\n                }\n                return feature\n            })\n\n            layer = L.geoJSON(geojsonFeature, {\n                pointToLayer: createMarker,\n                onEachFeature: (feature, layer) => {\n                    if (feature.properties && feature.properties.label) {\n                        layer.bindPopup(feature.properties.label, {\n                            closeButton: false,\n                            autoPan: false,\n                            offset: L.point(0, 0)\n                        })\n                        layer.on('mouseover', () => layer.openPopup())\n                        layer.on('mouseout', () => layer.closePopup())\n                        layer.on('click', () => {\n                            openedResultIndex.set(feature.properties.parentId)\n                            feature.properties.scrollIntoView()\n                        })\n                    }\n                }\n            }).addTo(map)\n\n        }\n    }\n\n    $: {\n        //have a point the map for the opened result improve visibility\n        if (selectedPointLayer) {\n            map.removeLayer(selectedPointLayer)\n            selectedPointLayer = null\n        }\n        if ($results.length && $openedResultIndex) {\n            const result = $results.find(result => result.index === $openedResultIndex)\n            const feature = result.features.length ? result.features.find(feature => feature.properties.id === result.selectedFeatureId) : null\n            if (result && feature) {\n                const coords = feature.geometry.coordinates.slice().reverse()\n                selectedPointLayer = L.marker(coords).addTo(map)\n            }\n        }\n\n    }\n\n    function zoomToExtent() {\n        map.fitBounds(layer.getBounds())\n    }\n\n    function clearAll() {\n        results.reset([])\n        openedResultIndex.set(null)\n    }\n\n\n</script>\n\n<div class=\"top\">\n    <button class=\"button is-small\" on:click={zoomToExtent}>Fit map</button>\n    <button class=\"button is-small is-danger\" on:click={clearAll}>Clear all</button>\n</div>\n<div id=\"map\" bind:this={container}></div>\n\n<style>\n    .top {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n    }\n\n    #map {\n        margin-top: 0.5rem;\n        min-width: inherit;\n        height: 400px;\n    }\n\n</style>",
    "<script>\n    export let color = '#fff'\n    export let size = 0.8\n\n    $: style = `background-color: ${color}; width: ${size}em; height: ${size}em;`\n</script>\n\n<span {style}></span>\n\n<style>\n    span{\n        display: inline-block;\n        border-radius: 0.2em;\n        margin-right: 0.2em;\n        border: 1px solid #FFF;\n    }\n</style>"
  ],
  "names": [],
  "mappings": "AA+CY,IAAI,AAAE,CAAC,AACX,MAAM,CAAE,IAAI,CAAC,IAAI,CACjB,SAAS,CAAE,MAAM,CACjB,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,CAAC,CAAC,IAAI,CACf,WAAW,CAAE,WAAW,CAAC,CAAC,UAAU,CAAC,UAAU,AACnD,CAAC,AAEO,WAAW,AAAE,CAAC,AAClB,UAAU,CAAE,MAAM,AACtB,CAAC;ACTD,UAAU,eAAC,CAAC,AACR,UAAU,CAAE,MAAM,AACtB,CAAC;ACmBD,IAAI,cAAC,CAAC,AACF,UAAU,CAAE,MAAM,CAClB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,KAAK,AACjB,CAAC;ACJD,QAAQ,eAAC,CAAC,AACN,KAAK,CAAE,OAAO,CACd,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,CACb,WAAW,CAAE,MAAM,AACvB,CAAC,AAED,OAAO,eAAC,CAAC,AACL,OAAO,CAAE,IAAI,AACjB,CAAC;ACxDD,MAAM,eAAC,CAAC,AACJ,UAAU,CAAE,MAAM,CAClB,UAAU,CAAE,IAAI,AACpB,CAAC,AAED,KAAK,eAAC,CAAC,AACH,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,KAAK,AAClB,CAAC,AAED,aAAa,eAAC,CAAC,AACX,SAAS,CAAE,MAAM,CACjB,UAAU,CAAE,GAAG,CACf,UAAU,CAAE,MAAM,AACtB,CAAC,AAED,aAAa,eAAC,CAAC,AACX,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,eAAe,CAAE,YAAY,AACjC,CAAC,AAED,MAAM,eAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,AAC1B,CAAC;ACeD,QAAQ,cAAC,CAAC,AACN,KAAK,CAAE,OAAO,CACd,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,CACb,WAAW,CAAE,MAAM,AACvB,CAAC,AAED,sBAAQ,aAAa,AAAC,CAAC,AACnB,KAAK,CAAE,OAAO,CACd,WAAW,CAAE,GAAG,AACpB,CAAC;ACKD,SAAS,cAAC,CAAC,AACP,aAAa,CAAE,KAAK,CACpB,WAAW,CAAE,GAAG,CAChB,cAAc,CAAE,MAAM,CACtB,MAAM,CAAE,OAAO,CACf,WAAW,CAAE,GAAG,AACpB,CAAC,AAED,MAAM,cAAC,CAAC,AACJ,UAAU,CAAE,IAAI,CAChB,UAAU,CAAE,KAAK,CACjB,UAAU,CAAE,IAAI,AACpB,CAAC,AAED,IAAI,cAAC,CAAC,AACF,SAAS,CAAE,KAAK,AACpB,CAAC;AC5ED,MAAM,4BAAC,CAAC,AACJ,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,gBAAgB,CAAE,gBAAgB,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CACvF,KAAK,CAAE,IAAI,AACf,CAAC,AAED,QAAQ,4BAAC,CAAC,AACN,WAAW,CAAE,IAAI,CACjB,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,MAAM,AACtB,CAAC,AAED,sBAAQ,CAAG,GAAG,cAAC,CAAC,AACZ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,OAAO,CAEzB,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,YAAY,CACrB,iBAAiB,CAAE,4BAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAChE,SAAS,CAAE,4BAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,AAC5D,CAAC,AAED,sBAAQ,CAAC,QAAQ,cAAC,CAAC,AACf,uBAAuB,CAAE,MAAM,CAC/B,eAAe,CAAE,MAAM,AAC3B,CAAC,AAED,sBAAQ,CAAC,QAAQ,cAAC,CAAC,AACf,uBAAuB,CAAE,MAAM,CAC/B,eAAe,CAAE,MAAM,AAC3B,CAAC,AAED,mBAAmB,4BAAe,CAAC,AAC/B,EAAE,CAAE,GAAG,CAAE,IAAI,AAAC,CAAC,AACX,iBAAiB,CAAE,MAAM,CAAC,CAAC;QAC/B,CAAC,AACD,GAAG,AAAC,CAAC,AACD,iBAAiB,CAAE,MAAM,GAAG,CAAC;QACjC,CAAC,AACL,CAAC,AAED,WAAW,4BAAe,CAAC,AACvB,EAAE,CAAE,GAAG,CAAE,IAAI,AAAC,CAAC,AACX,iBAAiB,CAAE,MAAM,CAAC,CAAC,CAC3B,SAAS,CAAE,MAAM,CAAC,CAAC,AACvB,CAAC,AACD,GAAG,AAAC,CAAC,AACD,iBAAiB,CAAE,MAAM,GAAG,CAAC,CAC7B,SAAS,CAAE,MAAM,GAAG,CAAC,AACzB,CAAC,AACL,CAAC;AChDD,OAAO,cAAC,CAAC,AACL,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,MAAM,AAClB,CAAC;ACmGD,YAAY,8BAAC,CAAC,AACV,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,WAAW,CAAE,GAAG,CAChB,SAAS,CAAE,MAAM,CACjB,KAAK,CAAE,OAAO,CACd,WAAW,CAAE,IAAI,CACjB,aAAa,CAAE,MAAM,AACzB,CAAC,AAED,IAAI,8BAAC,CAAC,AACF,OAAO,CAAE,GAAG,CAAC,IAAI,CACjB,MAAM,CAAE,OAAO,CACf,KAAK,CAAE,OAAO,CACd,gBAAgB,CAAE,OAAO,CACzB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAChC,sBAAsB,CAAE,GAAG,CAC3B,uBAAuB,CAAE,GAAG,AAChC,CAAC,AAED,WAAW,8BAAC,CAAC,AACT,MAAM,CAAE,OAAO,CAAC,MAAM,CACtB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,YAAY,AACjC,CAAC,AAED,OAAO,8BAAC,CAAC,AACL,MAAM,CAAE,MAAM,CACd,KAAK,CAAE,GAAG,CACV,WAAW,CAAE,MAAM,AACvB,CAAC,AAED,eAAe,8BAAC,CAAC,AACb,SAAS,CAAE,MAAM,AACrB,CAAC,AAED,uBAAQ,CAAC,KAAK,eAAC,CAAC,AACZ,WAAW,CAAE,MAAM,CACnB,aAAa,CAAE,MAAM,CACrB,SAAS,CAAE,OAAO,AACtB,CAAC,AAED,oBAAK,CAAC,KAAK,eAAC,CAAC,AACT,WAAW,CAAE,MAAM,AACvB,CAAC;AC7BD,IAAI,eAAC,CAAC,AACF,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,eAAe,CAAE,aAAa,AAClC,CAAC,AAED,IAAI,eAAC,CAAC,AACF,UAAU,CAAE,MAAM,CAClB,SAAS,CAAE,OAAO,CAClB,MAAM,CAAE,KAAK,AACjB,CAAC;AC9ID,mBAAI,CAAC,AACD,OAAO,CAAE,YAAY,CACrB,aAAa,CAAE,KAAK,CACpB,YAAY,CAAE,KAAK,CACnB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AAC1B,CAAC"
}